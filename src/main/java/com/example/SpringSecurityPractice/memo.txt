<Spring Security Configuration 적용>
Spring Security Configuration을 적용하면 사용자가 원하는 인증 방식과 웹 페이징에 대한 접근 권한 설정이 가능하다.

<UserDetailsManager>
Spring Security에서 제공하는 사용자의 핵심 정보를 포함한 UserDetails를 관리하는 인터페이스

<WithDefaultPasswordEncorder()>
Deprecated가 붙어있는데 이거는 해당 API가 이후 버전에서는 더 이상 사용되지 않고 제거될 수 있다는 의미다.
하지만 WithDefaultPasswordEncorder()에서 Deprecated는 Production환경에서 인증을 위한 사용자 정보를 고정해서 사용하지 말라는 경고의 의미이다.
따라서 WithDefaultPasswordEncorder()는 반드시 테스트 환경이나 데모 환경에서만 사용해야 한다.

<HttpSecurity>
Http 보안 설정을 구성하기 위한 핵심 클래스

<exceptionHandling()>
Exception 처리하는 기능, 리턴하는 ExceptionHandlingConfigurer 객체를 통해 구체적인 Exception 처리할 수 있다.

<accessDeniedPage()>
403 에러 발생 시 파라미터로 지정한 URL로 리다이렉 되도록 한다.

<antMatchers()>
ant라는 빌드 툴에서 사용되는 Path Pattern을 이용해 매치되는 URL을 표현

* Spring Security 에서 관리하는 User 정보는 UserDetails로 관리한다. *

<Custom UserDetailsService>
User의 인증 정보를 저장하고, 테이블에 저장된 인증 정보를 이용해 인증 프로세스를 진행할 수 있는 방법 중 하나
스프링 시큐리티에서 인증을 시도하는 주체를 User라고 한다.
Principal은 User의 더 구체적인 정보를 의미하고 일반적으로 스프링 시큐리티에서의 Username을 의미한다.

* UserDetailsService는 User 정보를 로드하는 핵심 인터페이스 -> 로드의 의미는 인증에 필요한 User 정보를 어딘가에서 가져온다는 의미

<UserDetails>
UserDetailsService에 의해 로드되어 인증을 위해 사용되는 핵심 User 정보를 표현하는 인터페이스
UserDetails 인터페이스의 구현체는 스프링 시큐리티에서 보안 정보 제공을 목적으로 직접 사용되지는 않고, Authentication 객체로 캡슐화되어 제공된다.

* Spring Security에서 인증 실패 시 AuthenticationException이 throw 되지 않으면 Exception에 대한 별도의 처리를 하지 않고
서블릿 컨테이너인 톰켓 쪽으로 이 처리를 넘긴다.